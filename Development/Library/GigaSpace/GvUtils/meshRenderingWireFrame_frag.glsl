////////////////////////////////////////////////////////////////////////////////
//
// FRAGMENT SHADER
//
// Spiral arms with wireframe
// - Gardner : cloud opacity simulation
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// VERSION
////////////////////////////////////////////////////////////////////////////////

#version 400

////////////////////////////////////////////////////////////////////////////////
// INPUT
////////////////////////////////////////////////////////////////////////////////

in vec3 iPosition;
//in vec3 iNormal;
noperspective in vec3 EdgeDistance;

////////////////////////////////////////////////////////////////////////////////
// UNIFORM
////////////////////////////////////////////////////////////////////////////////

// Model color
uniform vec3 uColor;

// Wireframe parameter
uniform float uLineWidth;
uniform vec4 uLineColor;

////////////////////////////////////////////////////////////////////////////////
// OUTPUT
////////////////////////////////////////////////////////////////////////////////

layout (location = 0) out vec4 oColor;

////////////////////////////////////////////////////////////////////////////////
// PROGRAM
////////////////////////////////////////////////////////////////////////////////
void main()
{
	// Wireframe
	float distanceToEdge = min( EdgeDistance.z, min( EdgeDistance.x, EdgeDistance.y ) );
	float mixValue = smoothstep( uLineWidth - 1.0, uLineWidth + 1.0, distanceToEdge );
	
	// Gardner's shading
	//vec3 viewDir = normalize( vec3( -iPosition ) );
	//float opacity = 1.0 - iNormal * viewDir;
	float opacity = 1.0;

	// Output color
	oColor = mix( uLineColor, vec4( uColor, opacity ), mixValue );
}
