////////////////////////////////////////////////////////////////////////////////
//
// VERTEX SHADER
//
// GigaVoxels Renderer
// - ...
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// VERSION
////////////////////////////////////////////////////////////////////////////////

#version 410 compatibility

////////////////////////////////////////////////////////////////////////////////
// INPUT
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// VARYING
////////////////////////////////////////////////////////////////////////////////

// Position in World space
varying vec4 worldPixelPos;

// Position in Eye space
varying vec3 cameraPixelPos;

// Normal
varying vec3 normal;

////////////////////////////////////////////////////////////////////////////////
// UNIFORM
////////////////////////////////////////////////////////////////////////////////

// GigaSpace Model matrix
uniform mat4 gvModelMatrix;

// 3D model Model Matrix
uniform mat4 objectModelMatrix;

////////////////////////////////////////////////////////////////////////////////
// OUTPUT
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// PROGRAM
////////////////////////////////////////////////////////////////////////////////
void main()
{
	// Send position to Clip space
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;

	// Pass varying attributes
	worldPixelPos = objectModelMatrix * gl_Vertex;
	cameraPixelPos = vec3( gl_ModelViewMatrix * gl_Vertex );
	normal = gl_NormalMatrix * gl_Normal;
}
