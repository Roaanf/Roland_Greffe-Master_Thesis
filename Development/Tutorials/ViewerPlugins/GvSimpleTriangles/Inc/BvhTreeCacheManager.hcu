/*
 * GigaVoxels - GigaSpace
 *
 * Website: http://gigavoxels.inrialpes.fr/
 *
 * Contributors: GigaVoxels Team
 *
 * BSD 3-Clause License:
 *
 * Copyright (C) 2007-2015 INRIA - LJK (CNRS - Grenoble University), All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the organization nor the names  of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDER BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/** 
 * @version 1.0
 */

/******************************************************************************
 ******************************* INCLUDE SECTION ******************************
 ******************************************************************************/

/******************************************************************************
 ************************* DEFINE AND CONSTANT SECTION ************************
 ******************************************************************************/

/**
 * Time stamps buffer
 */
__constant__ GvCore::Array3DKernelLinear< uint > k_VTC_TimeStampArray;

/******************************************************************************
 ***************************** TYPE DEFINITION ********************************
 ******************************************************************************/

/******************************************************************************
 ******************************** CLASS USED **********************************
 ******************************************************************************/

/******************************************************************************
 ****************************** CLASS DEFINITION ******************************
 ******************************************************************************/

/******************************************************************************
 ****************************** INLINE DEFINITION *****************************
 ******************************************************************************/

/******************************************************************************
 * CacheManagerFlagTimeStampsSP KERNEL
 *
 * Create the list of used and non-used elements at current time (in a single pass)
 *
 * @param cacheManager
 * @param numElem
 * @param timeStampsElemAddressList
 * @param tempMaskList ouput mask of non-used element at current frame
 * @param tempMaskList2 ouput mask of used element at current frame
 ******************************************************************************/
__global__
void CacheManagerFlagTimeStampsSP( uint numElem, uint* timeStampsElemAddressList, uint* tempMaskList, uint* tempMaskList2 )
{
	// Compute global element index
	uint lineSize = __uimul( blockDim.x, gridDim.x );
	uint elem = threadIdx.x + __uimul( blockIdx.x, blockDim.x ) + __uimul( blockIdx.y, lineSize );

	// Check bounds (max number of elements to process)
	if ( elem < numElem )
	{
		uint elemAddressEnc = timeStampsElemAddressList[ elem ];
		//uint3 elemAddress = AddressType::unpackAddress( elemAddressEnc );

		// Generate an error
		if //( cacheManager._timeStampArray.get( elemAddress ) == k_currentTime )
			( k_VTC_TimeStampArray.get( elemAddressEnc ) == k_currentTime )
		{
			tempMaskList[ elem ] = 0;
			tempMaskList2[ elem ] = 1;
		}
		else
		{
			tempMaskList[ elem ] = 1;
			tempMaskList2[ elem ] = 0;
		}
	}
}

/******************************************************************************
 * CacheManagerCreateUpdateMask KERNEL
 *
 * Given an input list of nodes updated with their requests, it outputs an equivalent lists of masks [ 0 or 1 ]
 * depending of the comparison with a given flag.
 * Flag is a type of requests as "subdivide node" or "produce brick"
 *
 * @param numElem number of elements to process
 * @param updateList input list of nodes updated with their requests
 * @param resMask resulting list of masks of requests whose type is the same as the given flag
 * @param flag flag used to compare the value of input requests
 ******************************************************************************/
__global__
void CacheManagerCreateUpdateMask( const uint numElem, const uint* updateList, uint* resMask, const uint flag )
{
	// Compute global element index
	uint lineSize = __uimul( blockDim.x, gridDim.x );
	uint elem = threadIdx.x + __uimul( blockIdx.x, blockDim.x ) + __uimul( blockIdx.y, lineSize );

	// Check bounds (max number of elements to process)
	if ( elem < numElem )
	{
		uint elemVal = updateList[ elem ];

		if ( elemVal & flag )
		{
			resMask[ elem ] = 1;
		}
		else
		{
			resMask[ elem ] = 0;
		}
	}
}
