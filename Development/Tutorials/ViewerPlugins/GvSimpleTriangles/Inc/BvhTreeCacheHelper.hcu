/*
 * GigaVoxels - GigaSpace
 *
 * Website: http://gigavoxels.inrialpes.fr/
 *
 * Contributors: GigaVoxels Team
 *
 * BSD 3-Clause License:
 *
 * Copyright (C) 2007-2015 INRIA - LJK (CNRS - Grenoble University), All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the organization nor the names  of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDER BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/******************************************************************************
 ******************************* INCLUDE SECTION ******************************
 ******************************************************************************/

// Gigavoxels
//#include "../structure/GvVolumeTreeAddressType.h"

/******************************************************************************
 ***************************** KERNEL DEFINITION ******************************
 ******************************************************************************/

/******************************************************************************
 * KERNEL GenericWriteIntoCache
 *
 * This method is a helper for writing into the cache.
 *
 * @param pNumElems The number of elements we need to produce and write.
 * @param pNodesAddressList The numElements nodes concerned by the production.
 * @param pElemAddressList The numElements addresses of the new elements.
 * @param pGpuPool The pool where we will write the produced elements.
 * @param pGpuProvider The provider called for the production.
 * @param pPageTable 
 ******************************************************************************/
template< typename ElementRes, typename BvhTreeType, typename PoolType, typename ProviderType >
__global__
void GenericWriteIntoCache( uint pNumElems, uint* pNodesAddressList, uint* pElemAddressList,
	BvhTreeType bvhTree, PoolType pGpuPool, ProviderType pGpuProvider )
{
	// Retrieve global indexes
	uint elemNum = blockIdx.x;
	uint threadId = threadIdx.x + __uimul( threadIdx.y, blockDim.x ) + __uimul( threadIdx.z, __uimul( blockDim.x, blockDim.y ) );

	// Check bound
	if ( elemNum < pNumElems )
	{
		__shared__ uint elemIndex;
		__shared__ uint nodeAddress;
		__shared__ uint3 elemAddress;

		__shared__ VolTreeBVHNodeUser node;

		if ( threadId == 0 )
		{
			// Compute node address
			uint nodeAddressEnc = pNodesAddressList[ elemNum ];
			nodeAddress = nodeAddressEnc & 0x3FFFFFFF;

			// fetch the node associated to the node address
			bvhTree.fetchBVHNode( node, nodeAddress );

			// Compute element address
			elemIndex = pElemAddressList[ elemNum ];
			elemAddress = make_uint3( elemIndex, 1, 1 ) * ElementRes::get();
		}

		// Thread Synchronization
		__syncthreads();

		// Produce data
		__shared__ uint prodFeedback;
		prodFeedback = pGpuProvider.produceData( pGpuPool, elemNum, threadId, elemAddress, node );

		// Thread Synchronization
		__syncthreads();

		if ( threadId == 0 )
		{
			// FIXME : Move this ?
			bvhTree.writeBVHNode( node, nodeAddress );
			setDataPageUsage( elemIndex );
		}

		// Thread Synchronization
		__syncthreads();
	}
}
