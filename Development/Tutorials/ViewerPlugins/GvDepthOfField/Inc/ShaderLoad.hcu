/*
 * GigaVoxels is a ray-guided streaming library used for efficient
 * 3D real-time rendering of highly detailed volumetric scenes.
 *
 * Copyright (C) 2011-2012 INRIA <http://www.inria.fr/>
 *
 * Authors : GigaVoxels Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/** 
 * @version 1.0
 */

#ifndef _SHADERLOAD_HCU_
#define _SHADERLOAD_HCU_

/******************************************************************************
 ******************************* INCLUDE SECTION ******************************
 ******************************************************************************/

// GigaVoxels
#include <GvRenderer/GvIRenderShader.h>

/******************************************************************************
 ************************* DEFINE AND CONSTANT SECTION ************************
 ******************************************************************************/

/**
 * Light position
 */
__constant__ float3 cLightPosition;

/**
 * Depth of filed parameter
 */
__constant__ float3 cDofParameters;

/******************************************************************************
 ***************************** TYPE DEFINITION ********************************
 ******************************************************************************/

/******************************************************************************
 ******************************** CLASS USED **********************************
 ******************************************************************************/

/******************************************************************************
 ****************************** CLASS DEFINITION ******************************
 ******************************************************************************/

/** 
 * @class ShaderLoadKernel
 *
 * @brief The ShaderLoadKernel class provides...
 *
 * ...
 */
class ShaderLoadKernel : public GvRenderer::GvIRenderShader< ShaderLoadKernel >
{

	/**************************************************************************
	 ***************************** PUBLIC SECTION *****************************
	 **************************************************************************/

public:

	/****************************** INNER TYPES *******************************/

	/******************************* ATTRIBUTES *******************************/

	/******************************** METHODS *********************************/

	/**
	 * Do the shading equation at a givent point
	 *
	 * @param pMaterialColor material color
	 * @param pNormalVec normal
	 * @param pLightVec light vector
	 * @param pEyeVec eye vector
	 * @param pAmbientTerm ambiant term
	 * @param pDiffuseTerm diffuse term
	 * @param pSpecularTerm specular term
	 *
	 * @return the computed color
	 */
	__device__
	inline float3 shadePointLight( float3 pMaterialColor, float3 pNormalVec, float3 pLightVec, float3 pEyeVec,
								float3 pAmbientTerm, float3 pDiffuseTerm, float3 pSpecularTerm )
	{
		float3 final_color = pMaterialColor * pAmbientTerm;

		//float lightDist=length(pLightVec);
		float3 lightVecNorm = ( pLightVec );
		float lambertTerm = ( dot( pNormalVec, lightVecNorm ) );

		if ( lambertTerm > 0.0f )
		{
			// Diffuse
			final_color += pMaterialColor * pDiffuseTerm * lambertTerm;

			float3 halfVec = normalize( lightVecNorm + pEyeVec );//*0.5f;
			float specular = __powf( max( dot( pNormalVec, halfVec ), 0.0f ), 64.0f );

			//Specular
			//final_color += make_float3( specular ) * pSpecularTerm;
		}

		return final_color;
	}

	/**
	 * This method is called just before the cast of a ray. Use it to initialize any data
	 *  you may need. You may also want to modify the initial distance along the ray (tTree).
	 *
	 * @param pRayStartTree the starting position of the ray in octree's space.
	 * @param pRayDirTree the direction of the ray in octree's space.
	 * @param pTTree the distance along the ray's direction we start from.
	 */
	__device__
	inline void preShadeImpl( const float3& pRayStartTree, const float3& pRayDirTree, float& pTTree )
	{
		_accColor = make_float4( 0.f );
	}

	/**
	 * This method is called after the ray stopped or left the bounding
	 * volume. You may want to do some post-treatment of the color.
	 */
	__device__
	inline void postShadeImpl()
	{
		if ( _accColor.w >= cOpacityStep )
		{
			_accColor.w = 1.f;
		}
	}

	/**
	 * This method returns the cone aperture for a given distance.
	 *
	 * @param pTTree the current distance along the ray's direction.
	 *
	 * @return the cone aperture
	 */
	__device__
	inline float getConeApertureImpl( const float pTTree ) const
	{
		//new values
		float aperture = cDofParameters.x;//userParam.y / 10.0f;
		float focalLength = cDofParameters.y;//userParam.z / 200.0f;
		float planeInFocus = cDofParameters.z;//userParam.x / 20.0f;

		///float R= fabs( aperture * (focalLength*(dist-planeInFocus))/(dist*(planeInFocus-focalLength))   );
		//float R=(aperture*focalLength)/(planeInFocus-focalLength) * abs(dist-planeInFocus)/dist;
		//float CoC = aperture * focalLength / (planeInFocus - focalLength) * fabsf(planeInFocus - pTTree) / pTTree;
		// Is CoC "circle of confusion" ?
		float CoC = fabsf( aperture * ( focalLength * ( planeInFocus - pTTree ) ) / ( pTTree * ( planeInFocus - focalLength ) ) );
		//float CoC = aperture * focalLength / (planeInFocus - focalLength) * fabsf(planeInFocus - pTTree) / pTTree;

		//return k_pixelSize.x*R *k_frustumNearINV;

		float scaleFactor = 1.0f + CoC;

		return k_renderViewContext.pixelSize.x * pTTree * scaleFactor * k_renderViewContext.frustumNearINV;
		//return k_renderViewContext.pixelSize.x * pTTree * 1.0f * k_renderViewContext.frustumNearINV;
	}

	/**
	 * This method returns the final rgba color that will be written to the color buffer.
	 *
	 * @return the final rgba color.
	 */
	__device__
	inline float4 getColorImpl() const
	{
		return _accColor;
	}

	/**
	 * This method is called before each sampling to check whether or not the ray should stop.
	 *
	 * @param pRayPosInWorld the current ray's position in world space.
	 *
	 * @return true if you want to continue the ray. false otherwise.
	 */
	__device__
	inline bool stopCriterionImpl( const float3& pRayPosInWorld ) const
	{
		return ( _accColor.w >= cOpacityStep );
	}

	/**
	 * This method is called to know if we should stop at the current octree's level.
	 *
	 * @param pVoxelSize the voxel's size in the current octree level.
	 *
	 * @return false if you want to stop at the current octree's level. true otherwise.
	 */
	__device__
	inline bool descentCriterionImpl( const float pVoxelSize ) const
	{
		return true;
	}

	/**
	 * This method is called for each sample. For example, shading or secondary rays
	 * should be done here.
	 *
	 * @param pBrickSampler ...
	 * @param pSamplePosScene ...
	 * @param pRayDir ...
	 * @param pRayStep ...
	 * @param pConeAperture ...
	 */
	template< typename TBrickSamplerType >
	__device__
	inline void runImpl( const TBrickSamplerType& pBrickSampler, const float3 pSamplePosScene,
		const float3 pRayDir, float& pRayStep, const float pConeAperture )
	{
		float4 col = pBrickSampler.template getValue< 0 >( pConeAperture );

		if ( col.w > 0.0f )
		{
			float3 grad = make_float3( 0.0f );

			float gradStep = pRayStep * 0.25f;

			float4 v0, v1;

			v0 = pBrickSampler.template getValue< 0 >( pConeAperture, make_float3( gradStep, 0.0f, 0.0f) );
			v1 = pBrickSampler.template getValue< 0 >( pConeAperture, make_float3(-gradStep, 0.0f, 0.0f) );
			grad.x = v0.w - v1.w;

			v0 = pBrickSampler.template getValue< 0 >( pConeAperture, make_float3(0.0f,  gradStep, 0.0f) );
			v1 = pBrickSampler.template getValue< 0 >( pConeAperture, make_float3(0.0f, -gradStep, 0.0f) );
			grad.y = v0.w - v1.w;

			v0 = pBrickSampler.template getValue< 0 >( pConeAperture, make_float3(0.0f, 0.0f,  gradStep) );
			v1 = pBrickSampler.template getValue< 0 >( pConeAperture, make_float3(0.0f, 0.0f, -gradStep) );
			grad.z = v0.w - v1.w;

			if ( length( grad ) > 0.0f )
			{
				grad =- grad;
				grad = normalize( grad );

				float vis = 1.0f;

				float3 lightVec = normalize( cLightPosition - pSamplePosScene );
				float3 viewVec = (-1.0f * pRayDir);

				float3 rgb;
				rgb.x = col.x;
				rgb.y = col.y;
				rgb.z = col.z;
				rgb = shadePointLight( rgb, grad, lightVec, viewVec, make_float3( 0.2f * vis ), make_float3( 1.0f * (0.3f + vis*0.7f) ), make_float3(0.9f) );
				
				// Due to alpha pre-multiplication
				col.x = rgb.x / col.w;
				col.y = rgb.y / col.w;
				col.z = rgb.z / col.w;
			}
			else
			{
				//col = make_float4( 0.0f );

				// Problem !
				// In this case, the normal generated by the gradient is null...
				// That generates visual artefacts...
				//col = make_float4( 0.0f );
				//color = make_float4( 1.0, 0.f, 0.f, 1.0f );
				// Ambient : no shading
				//float3 final_color = materialColor * ambientTerm;
				float vis = 1.0f;
				float3 rgb;
				rgb.x = col.x; rgb.y = col.y; rgb.z = col.z;
				float3 final_color = rgb * make_float3( 0.2f * vis );

				// Due to alpha pre-multiplication
				col.x = final_color.x / col.w;
				col.y =  final_color.y / col.w;
				col.z = final_color.z / col.w;
			}

			// -- [ Opacity correction ] --
			// The standard equation :
			//		_accColor = _accColor + ( 1.0f - _accColor.w ) * color;
			// must take alpha correction into account
			// NOTE : if ( color.w == 0 ) then alphaCorrection equals 0.f
			float alphaCorrection = ( 1.0f -_accColor.w ) * ( 1.0f - powf( 1.0f - col.w, pRayStep * 512.f ) );

			// Accumulate the color
			_accColor.x += alphaCorrection * col.x;
			_accColor.y += alphaCorrection * col.y;
			_accColor.z += alphaCorrection * col.z;
			_accColor.w += alphaCorrection;
		}
	}

	/**************************************************************************
	 **************************** PROTECTED SECTION ***************************
	 **************************************************************************/

protected:

	/****************************** INNER TYPES *******************************/

	/******************************* ATTRIBUTES *******************************/

	/******************************** METHODS *********************************/

	/**************************************************************************
	 ***************************** PRIVATE SECTION ****************************
	 **************************************************************************/

private:

	/****************************** INNER TYPES *******************************/

	/******************************* ATTRIBUTES *******************************/

	/**
	 * The accumulated color on a ray
	 */
	float4 _accColor;

	/******************************** METHODS *********************************/

};

#endif // !_SHADERLOAD_HCU_
