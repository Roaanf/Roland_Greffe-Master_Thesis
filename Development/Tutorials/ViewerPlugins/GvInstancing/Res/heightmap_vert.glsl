////////////////////////////////////////////////////////////////////////////////
//
// VERTEX SHADER
//
// Sky box rendering
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// VERSION
////////////////////////////////////////////////////////////////////////////////

#version 400

////////////////////////////////////////////////////////////////////////////////
// INPUT
////////////////////////////////////////////////////////////////////////////////

// Vertex position in Object space
layout (location = 0) in vec3 VertexPosition;

////////////////////////////////////////////////////////////////////////////////
// UNIFORM
////////////////////////////////////////////////////////////////////////////////

// Model View Projection matrix
uniform mat4 uModelViewMatrix;
uniform mat4 uProjectionMatrix;
uniform mat4 uModelViewProjectionMatrix;

// Terrain parameters
uniform ivec2 HALF_TERRAIN_SIZE;	// half terrain size
uniform float scale;				// scale for the heightmap height
uniform float half_scale;			// half of the scale
uniform sampler2D heightMapTexture;	// heightmap texture

////////////////////////////////////////////////////////////////////////////////
// OUTPUT
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// PROGRAM
////////////////////////////////////////////////////////////////////////////////
void main()
{
	// Retrieve altitude from heightmap
	float height = texture( heightMapTexture, VertexPosition.xz ).r * scale;

	// Transform vertex
	vec2 position = ( VertexPosition.xz * 2.0 - 1.0 ) * HALF_TERRAIN_SIZE;

	// Send vertex position to Clip space
	//gl_Position = uModelViewProjectionMatrix * vec4( position.x, height, position.z, 1.0 );
	gl_Position = uProjectionMatrix * uModelViewMatrix * vec4( position.x, height, position.y, 1.0 );
}
