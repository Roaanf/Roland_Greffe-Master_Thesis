/*! \page Tutorial_Voxelization Voxelization Tutorial
 *
 * \image html GigaVoxelsLogo_div2.png
 *
 * @section Overview_Section Overview
 *
 * This example shows how to write a custom Data Production Management to voxelize a mesh "on the fly".
 *
 * <br> 
 * The main themes related to this tutorial are :
 * - mesh voxelization
 * - OpenGL graphics interoperability
 * - reading/writing to textures with OpenGL (GLSL shader programs)
 *
 * <br>
 * \image html voxelization_image_01.png "A voxelized mesh"
 *
 * <br>
 * <hr>
 *
 * @section Tutorial_Voxelization_Mandatory_Section Recommandation
 *
 * FIRST, assure you have read the basic programming scheme of GigaVoxels available in the \ref Library_HowToProgram_TheBasics_Page section. 
 * <br>
 *
 * The associated GigaVoxels pipeline is mainly based on a Host Producer that writes data in a memory "mapped" buffer.
 * The associated Kernel Producer reads this buffer to update the cache on Device. The Host Producer has been modified to write data in the Data Pool with the help of a GLSL program used to do mesh voxelization on the fly.
 * <br>
 * <hr>
 *
 * @section UMLDesign_Section UML Design
 *
 * The following screenshot is a simplified class Diagram of the classes used in this tutorial.
 *
 * Different colors are used to ease comprehension :
 * - RED    : third party dependency classes (QGLViewer, Loki, etc...)
 * - BLUE   : GigaVoxels classes
 * - YELLOW : user HOST classes
 * - GREEN  : user DEVICE classes
 *
 * The SampleCore class is the main GigaVoxels pipeline containing :
 * - the GigaVoxels COMMON classes
 * \li DATA STRUCTURE : the sparse voxel octree structure GvStructure::GvVolumeTree
 * \li CACHE : the cache manager system GvStructure::GvVolumeTreeCache
 * \li RENDERER : the ray-casting renderer GvRenderer::VolumeTreeRendererCUDA
 * - the USER defined classes
 * \li PRODUCER : a host SphereProducer with its associated device-side SphereProducerKernel
 * \li SHADER : a host SphereShader with its associated device-side SphereShaderKernel
 *
 * <br>
 * \image html UML_SimpleSphereDemo.png "UML class diagram"
 *
 * <br>
 *
 * QGLViewer and ManipulatedFrame are IHM classes to create a 3D window and a light interactor.
 *
 * <br>
 * <hr>
 *
 * @section Tutorial_Simple_Sphere_DataStructure Data Structure
 *
 * The content of a voxel is represented by two channels :
 * - one for RGBA colors (uchar4 type),
 * - and one for normals (half4 type).
 *
 * \code
 * typedef Loki::TL::MakeTypelist< uchar4, half4 >::Result DataType;
 * \endcode
 *
 * The data structre is an octree (2x2x2) defined by :
 * \code 
 * // Defines the size of a node tile
 * typedef gigavoxels::StaticRes1D< 2 > NodeRes;
 *
 * // Defines the size of a brick
 * typedef gigavoxels::StaticRes1D< 8 > BrickRes;
 *
 * // Defines the size of the border around a brick
 * enum { BrickBorderSize = 1 };
 *
 * // Defines the total size of a brick
 * typedef gigavoxels::StaticRes1D< 8 + 2 * BrickBorderSize > RealBrickRes;
 *
 * // Defines the type of structure we want to use. Array3DGPUTex is the type of array used to store the bricks.
 * typedef gigavoxels::VolumeTree< DataType, gigavoxels::Array3DGPUTex, NodeRes, BrickRes, BrickBorderSize > VolumeTreeType;
 * \endcode 
 *
 * <br>
 * Now let's have a look at the SphereProducerKernal code. As said before, users have to write a produceData() method for each of the two channel :
 * - node tiles,
 * - bricks of voxels.
 *
 * <br>
 * <hr>
 * \section Tutorial_Simple_Sphere_Node_Tiles_Production Node tiles production
 *
 * In this section, we detail code to explain how to produce nodes.
 *
 * \code
 /******************************************************************************
 * Produce data on device.
 * Implement the produceData method for the channel 0 (nodes)
 *
 * Producing data mecanism works element by element (node tile or brick) depending on the channel.
 *
 * In the function, user has to produce data for a node tile or a brick of voxels :
 * - for a node tile, user has to defined regions (i.e nodes) where lies data, constant values,
 * etc...
 * - for a brick, user has to produce data (i.e voxels) at for each of the channels
 * user had previously defined (color, normal, density, etc...)
 *
 * @param pGpuPool The device side pool (nodes or bricks)
 * @param pRequestID The current processed element coming from the data requests list (a node tile or a brick)
 * @param pProcessID Index of one of the elements inside a node tile or a voxel bricks
 * @param pNewElemAddress The address at which to write the produced data in the pool
 * @param pParentLocInfo The localization info used to locate an element in the pool
 * @param Loki::Int2Type< 0 > corresponds to the index of the node pool
 *
 * @return A feedback value that the user can return.
 ******************************************************************************/
template< typename NodeRes, typename BrickRes, uint BorderSize, typename VolTreeKernelType >
template< typename GPUPoolKernelType >
__device__
inline uint SphereProducerKernel< NodeRes, BrickRes, BorderSize, VolTreeKernelType >
::produceData( GPUPoolKernelType& nodePool, uint requestID, uint processID, uint3 newElemAddress,
			  const GvCore::GvLocalizationInfo& parentLocInfo, Loki::Int2Type< 0 > )
{
	// NOTE :
	// In this method, you are inside a node tile.
	// The goal is to determine, for each node of the node tile, which type of data it holds.
	// Data type can be :
	// - a constant region,
	// - a region with data,
	// - a region where max resolution is reached.
	// So, one thread is responsible of the production of one node of a node tile.
	
	// Retrieve current node tile localization information code and depth
	const GvCore::GvLocalizationInfo::CodeType parentLocCode = parentLocInfo.locCode;
	const GvCore::GvLocalizationInfo::DepthType parentLocDepth = parentLocInfo.locDepth;

	// Process ID gives the 1D index of a node in the current node tile
	if ( processID < NodeRes::getNumElements() )
	{
		// First, compute the 3D offset of the node in the node tile
		uint3 subOffset = NodeRes::toFloat3( processID );

		// Node production corresponds to subdivide a node tile.
		// So, based on the index of the node, find the node child.
		// As we want to sudbivide the curent node, we retrieve localization information
		// at the next level
		uint3 regionCoords = parentLocCode.addLevel< NodeRes >( subOffset ).get();
		uint regionDepth = parentLocDepth.addLevel().get();

		// Create a new node for which you will have to fill its information.
		GvStructure::OctreeNode newnode;
		newnode.childAddress = 0;
		newnode.brickAddress = 0;

		// Call what we call an oracle that will determine the type of the region of the node accordingly
		GPUVoxelProducer::GPUVPRegionInfo nodeinfo = getRegionInfo( regionCoords, regionDepth );

		// Now that the type of the region is found, fill the new node information
		if ( nodeinfo == GPUVoxelProducer::GPUVP_CONSTANT )
		{
			newnode.setTerminal( true );
		}
		else if ( nodeinfo == GPUVoxelProducer::GPUVP_DATA )
		{
			newnode.setStoreBrick();
			newnode.setTerminal( false );
		}
		else if ( nodeinfo == GPUVoxelProducer::GPUVP_DATA_MAXRES )
		{
			newnode.setStoreBrick();
			newnode.setTerminal( true );
		}

		// Finally, write the new node information into the node pool by selecting channels :
		// - Loki::Int2Type< 0 >() points to node information
		// - Loki::Int2Type< 1 >() points to brick information
		//
		// newElemAddress.x + processID : is the adress of the new node in the node pool
		nodePool.getChannel( Loki::Int2Type< 0 >() ).set( newElemAddress.x + processID, newnode.childAddress );
		nodePool.getChannel( Loki::Int2Type< 1 >() ).set( newElemAddress.x + processID, newnode.brickAddress );
	}

	return 0;
}
 * \endcode 
 *
 * <br>
 *
 * In the following, details the oracle part where regions of space are analysed to determine wheter or not it contains data.
 *
 * \code
 /******************************************************************************
 * Helper function used to determine the type of zones in the data structure.
 *
 * The data structure is made of regions containing data, empty or constant regions.
 * Besides, this function can tell if the maximum resolution is reached in a region.
 *
 * @param regionCoords region coordinates
 * @param regionDepth region deptj
 *
 * @return the type of the region
 ******************************************************************************/
template< typename NodeRes, typename BrickRes, uint BorderSize, typename VolTreeKernelType >
__device__
inline GPUVoxelProducer::GPUVPRegionInfo SphereProducerKernel< NodeRes, BrickRes, BorderSize, VolTreeKernelType >
::getRegionInfo( uint3 regionCoords, uint regionDepth )
{
	// Limit the depth
	if ( regionDepth >= 32 )
	{
		return GPUVoxelProducer::GPUVP_DATA_MAXRES;
	}

	// Shared memory declaration
	__shared__ uint3 brickRes;
	__shared__ float3 brickSize;
	__shared__ uint3 levelRes;
	__shared__ float3 levelResInv;

	brickRes = BrickRes::get();

	levelRes = make_uint3( 1 << regionDepth ) * brickRes;
	levelResInv = make_float3( 1.f ) / make_float3( levelRes );

	int3 brickPos = make_int3(regionCoords * brickRes) - BorderSize;
	float3 brickPosF = make_float3( brickPos ) * levelResInv;

	// Since we work in the range [-1;1] below, the brick size is two time bigger
	brickSize = make_float3( 1.f ) / make_float3( 1 << regionDepth ) * 2.f;

	// Test if any of the eight brick corner lie in the sphere
	float3 q000 = make_float3( regionCoords * brickRes ) * levelResInv * 2.f - 1.f;
	float3 q001 = make_float3( q000.x + brickSize.x, q000.y,			   q000.z);
	float3 q010 = make_float3( q000.x,				 q000.y + brickSize.y, q000.z);
	float3 q011 = make_float3( q000.x + brickSize.x, q000.y + brickSize.y, q000.z);
	float3 q100 = make_float3( q000.x,				 q000.y,			   q000.z + brickSize.z);
	float3 q101 = make_float3( q000.x + brickSize.x, q000.y,			   q000.z + brickSize.z);
	float3 q110 = make_float3( q000.x,				 q000.y + brickSize.y, q000.z + brickSize.z);
	float3 q111 = make_float3( q000.x + brickSize.x, q000.y + brickSize.y, q000.z + brickSize.z);

	if ( isInSphere( q000 ) || isInSphere( q001 ) || isInSphere( q010 ) || isInSphere( q011 ) ||
		isInSphere( q100 ) || isInSphere( q101 ) || isInSphere( q110 ) || isInSphere( q111 ) )
	{
		return GPUVoxelProducer::GPUVP_DATA;
	}

	return GPUVoxelProducer::GPUVP_CONSTANT;
}
 * \endcode 
 *
 * <br>
 *
 * Here is a simple helper function to test if a point is in a sphere.
 *
 * \code 
 /******************************************************************************
 * Helper class to test if a point is inside the unit sphere centered in [0,0,0]
 *
 * @param pPoint the point to test
 *
 * @return flag to tell wheter or not the point is insied the sphere
 ******************************************************************************/
__device__
inline bool isInSphere( float3 pPoint )
{
	return ( length( pPoint ) < 1.f );
}
 * \endcode 
 *
 *
 * <br>
 * <hr>
 * \section Tutorial_Simple_Sphere_Brick_Of_Voxels Brick of voxels production
 *
 * In this section, we detail code to explain how to produce bricks of voxels.
 *
 * \code
 /******************************************************************************
 * Produce data on device.
 * Implement the produceData method for the channel 1 (bricks)
 *
 * Producing data mecanism works element by element (node tile or brick) depending on the channel.
 *
 * In the function, user has to produce data for a node tile or a brick of voxels :
 * - for a node tile, user has to defined regions (i.e nodes) where lies data, constant values,
 * etc...
 * - for a brick, user has to produce data (i.e voxels) at for each of the channels
 * user had previously defined (color, normal, density, etc...)
 *
 * @param pGpuPool The device side pool (nodes or bricks)
 * @param pRequestID The current processed element coming from the data requests list (a node tile or a brick)
 * @param pProcessID Index of one of the elements inside a node tile or a voxel bricks
 * @param pNewElemAddress The address at which to write the produced data in the pool
 * @param pParentLocInfo The localization info used to locate an element in the pool
 * @param Loki::Int2Type< 1 > corresponds to the index of the brick pool
 *
 * @return A feedback value that the user can return.
 ******************************************************************************/
template< typename NodeRes, typename BrickRes, uint BorderSize, typename VolTreeKernelType >
template< typename GPUPoolKernelType >
__device__
inline uint SphereProducerKernel< NodeRes, BrickRes, BorderSize, VolTreeKernelType >
::produceData( GPUPoolKernelType& dataPool, uint requestID, uint processID, uint3 newElemAddress,
			  const GvCore::GvLocalizationInfo& parentLocInfo, Loki::Int2Type< 1 > )
{
	return 0;
}
 * \endcode
 *
 * <br>
 *
 * Here is the GLSL Fragment Shader program used by the Host Producer
 *
 * \code
 /******************************************************************************
  * FRAGMENT shader
  ******************************************************************************/
 * void main()
 * {
 *     if ( atomicCounter( uCounter ) == 0 )
 *     {
 *         atomicCounterIncrement( uCounter );
 *     }
 *	
 *     // We compute voxel offset
 *     vec3 brickCoord = /*nbElementsInBrick*/10.0 * ( uBrickMatrix * vec4( iData.worldPosition, 1.0 ) ).xyz;
 *
 *     ivec3 voxelOffset;
 *     voxelOffset.xy = ivec2( floor( brickCoord.xy ) );
 *     voxelOffset.z = int( floor( brickCoord.z ) );
 *
 *     // imageAtomicAdd()
 *     // - atomically add a value to an existing value in memory and return the original value
 *     //
 *     // "uBrickAddress" is the index of the brick in the cache (i.e. data pool)
 *     // so "uBrickAddress * 10" is the index of the equivalent voxel in the cache
 *     imageAtomicAdd( /*image*/uDataPoolx, /*coordinate*/uBrickAddress * 10 + voxelOffset, /*data*/iData.normal.x );
 *     imageAtomicAdd( /*image*/uDataPooly, /*coordinate*/uBrickAddress * 10 + voxelOffset, /*data*/iData.normal.y );
 *     imageAtomicAdd( /*image*/uDataPoolz, /*coordinate*/uBrickAddress * 10 + voxelOffset, /*data*/iData.normal.z );
 * }
 * \endcode 
 *
 * <br>
 *
 * <hr>
 *
 * @section NTree_Section N-Tree Visualization
 *
 * Resolution level : 0
 * \image html voxelization_image_01.png "Resolution level : 0"
 */
 