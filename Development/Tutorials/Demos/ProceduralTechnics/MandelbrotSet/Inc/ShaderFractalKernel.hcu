/*
 * GigaVoxels - GigaSpace
 *
 * Website: http://gigavoxels.inrialpes.fr/
 *
 * Contributors: GigaVoxels Team
 *
 * BSD 3-Clause License:
 *
 * Copyright (C) 2007-2015 INRIA - LJK (CNRS - Grenoble University), All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the organization nor the names  of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDER BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/** 
 * @version 1.0
 */

#ifndef _SHADERFRACTAL_HCU_
#define _SHADERFRACTAL_HCU_

/******************************************************************************
 ******************************* INCLUDE SECTION ******************************
 ******************************************************************************/

// GigaVoxels
#include <GvRendering/GsIRenderShader.h>
#include <GvRendering/GsRendererContext.h>

/******************************************************************************
 ************************* DEFINE AND CONSTANT SECTION ************************
 ******************************************************************************/

/**
 * ...
 */
texture< float4, cudaTextureType1D, cudaReadModeElementType > transFuncTex;

/**
 * ...
 */
__constant__ float3 cLightPosition;

/******************************************************************************
 ***************************** TYPE DEFINITION ********************************
 ******************************************************************************/

/******************************************************************************
 ******************************** CLASS USED **********************************
 ******************************************************************************/

/******************************************************************************
 ****************************** CLASS DEFINITION ******************************
 ******************************************************************************/

/** 
 * @class ShaderFractalKernel
 *
 * @brief The ShaderFractalKernel class provides...
 *
 * ...
 */
class ShaderFractalKernel : public GvRendering::GsIRenderShader< ShaderFractalKernel >
{

	/**************************************************************************
	 ***************************** PUBLIC SECTION *****************************
	 **************************************************************************/

public:


	/******************************* ATTRIBUTES *******************************/

	/******************************** METHODS *********************************/

	/**
	 * ...
	 *
	 * @param materialColor ...
	 * @param normalVec ...
	 * @param lightVec ...
	 * @param eyeVec ...
	 * @param ambiantTerm ...
	 * @param diffuseTerm ...
	 * @param specularTerm ...
	 */
	__device__
	inline float3 shadePointLight( float3 materialColor, float3 normalVec, float3 lightVec, float3 eyeVec,
								   float3 ambiantTerm, float3 diffuseTerm, float3 specularTerm )
	{
		float3 final_color = materialColor * ambiantTerm;

		//float lightDist=length(lightVec);
		float3 lightVecNorm = lightVec;
		float lambertTerm = dot( normalVec, lightVecNorm );

		if ( lambertTerm > 0.0f )
		{
			//Diffuse
			final_color += ( materialColor * diffuseTerm + ambiantTerm ) * lambertTerm ;

			float3 halfVec = normalize( lightVecNorm + eyeVec );//*0.5f;
			float specular = __powf( max( dot( normalVec, halfVec ), 0.0f ), 32.0f );

			//Specular
			final_color += ( make_float3( specular ) + ambiantTerm ) * specularTerm;
		}

		return final_color;
	}

	/**
	 * This method is called just before the cast of a ray. Use it to initialize any data
	 *  you may need. You may also want to modify the initial distance along the ray (tTree).
	 *
	 * @param rayStartTree the starting position of the ray in octree's space.
	 * @param rayDirTree the direction of the ray in octree's space.
	 * @param tTree the distance along the ray's direction we start from.
	 */
	__device__
	inline void preShadeImpl( const float3& rayStartTree, const float3& rayDirTree, float& tTree )
	{
		_accColor = make_float4( 0.f );
	}

	/**
	 * This method is called after the ray stopped or left the bounding 
	 * volume. You may want to do some post-treatment of the color.
	 */
	__device__
	inline void postShadeImpl()
	{
		if ( _accColor.w >= cOpacityStep )
		{
			_accColor.w = 1.f;
		}
	}

	/**
	 * This method returns the cone aperture for a given distance.
	 *
	 * @param tTree the current distance along the ray's direction.
	 *
	 * @return the cone aperture
	 */
	__device__
	inline float getConeApertureImpl( const float tTree ) const
	{
		// overestimate to avoid aliasing
		const float scaleFactor = 1.333f;

		return k_renderViewContext.pixelSize.x * tTree * scaleFactor * k_renderViewContext.frustumNearINV;
	}

	/**
	 * This method returns the final rgba color that will be written to the color buffer.
	 *
	 * @return the final rgba color.
	 */
	__device__
	inline float4 getColorImpl() const
	{
		return _accColor;
	}

	/**
	 * This method is called before each sampling to check whether or not the ray should stop.
	 *
	 * @param rayPosInWorld the current ray's position in world space.
	 *
	 * @return true if you want to continue the ray. false otherwise.
	 */
	__device__
	inline bool stopCriterionImpl( const float3& rayPosInWorld ) const
	{
		return ( _accColor.w >= cOpacityStep );
	}

	/**
	 * This method is called to know if we should stop at the current octree's level.
	 *
	 * @param voxelSize the voxel's size in the current octree level.
	 *
	 * @return false if you want to stop at the current octree's level. true otherwise.
	 */
	__device__
	inline bool descentCriterionImpl( const float voxelSize ) const
	{
		return true;
	}

	/**
	 * This method is called for each sample. For example, shading or secondary rays
	 * should be done here.
	 */
	template< typename BrickSamplerType >
	__device__
	inline void runImpl( const BrickSamplerType& brickSampler, const float3 samplePosScene,
						 const float3 rayDir, float& rayStep, const float coneAperture )
	{
		// Retrieve first channel element : normal and opacity
		float4 voxelData = brickSampler.template getValue< 0 >( coneAperture );

		// Opacity have been multiply by 64 before
		//
		// TO DO : check that
		voxelData.w = voxelData.w / 64.0f;

		const float pixelSize = coneAperture; //rayStep; //getPixelSizeAtDist< 0 >( t );
		const float shellSize = pixelSize * 2.0f;

		const float d = voxelData.w / shellSize;

		// Use transfer function
		float4 col = tex1D( transFuncTex, 1.0f - d );

		// Check opacity
		if ( col.w > 0.0f ) 
		{
			float3 grad;
			grad.x = ( voxelData.x - 0.5f ) * 2.0f ;
			grad.y = ( voxelData.y - 0.5f ) * 2.0f ;
			grad.z = ( voxelData.z - 0.5f ) * 2.0f ;
		
			// Compute light and view vector
			float3 lightVec = normalize( cLightPosition - samplePosScene );
			float3 viewVec = -1.0f * rayDir;

			// Shade point
			float vis = 1.0f;
			float3 rgb;
			rgb.x = col.x;
			rgb.y = col.y;
			rgb.z = col.z;
			rgb = shadePointLight( rgb, grad, lightVec, viewVec, make_float3( 0.2f * vis ), make_float3( 1.0f * ( 0.3f + vis * 0.7f ) ), make_float3( 0.9f ) );

			col.x = rgb.x;
			col.y = rgb.y;
			col.z = rgb.z;
		
			//col.w = 1.0f - __powf( 1.0f - col.w, rayStep * 1024.0f );

			//// Due to alpha pre-multiplication in the transfer function table
			//col.x = col.x / col.w;
			//col.y = col.y / col.w;
			//col.z = col.z / col.w;

			// -- [ Opacity correction ] --
			// The standard equation :
			//		_accColor = _accColor + ( 1.0f - _accColor.w ) * color;
			// must take alpha correction into account
			// NOTE : if ( color.w == 0 ) then alphaCorrection equals 0.f
			const float alphaCorrection = ( 1.0f -_accColor.w ) * ( 1.0f - __powf( 1.0f - col.w, rayStep * 512.0f ) );

			// Accumulate the color
			_accColor.x += alphaCorrection * col.x;
			_accColor.y += alphaCorrection * col.y;
			_accColor.z += alphaCorrection * col.z;
			_accColor.w += alphaCorrection;
		}
	}

	/**************************************************************************
	 **************************** PROTECTED SECTION ***************************
	 **************************************************************************/

protected:

	/******************************* ATTRIBUTES *******************************/

	/******************************** METHODS *********************************/

	/**************************************************************************
	 ***************************** PRIVATE SECTION ****************************
	 **************************************************************************/

private:

	/******************************* ATTRIBUTES *******************************/

	/**
	 * ...
	 */
	float4 _accColor;

};

/**************************************************************************
 ***************************** INLINE SECTION *****************************
 **************************************************************************/

//#include "ShaderFractalKernel.inl"


#endif // !_SHADERFRACTAL_HCU_
