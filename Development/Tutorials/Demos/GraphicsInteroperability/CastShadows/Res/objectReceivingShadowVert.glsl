////////////////////////////////////////////////////////////////////////////////
//
// VERTEX SHADER
//
// GigaVoxels Renderer
// - ...
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// VERSION
////////////////////////////////////////////////////////////////////////////////

#version 410 compatibility

////////////////////////////////////////////////////////////////////////////////
// INPUT
////////////////////////////////////////////////////////////////////////////////

uniform mat4 gvModelMatrix, objectModelMatrix;

////////////////////////////////////////////////////////////////////////////////
// OUTPUT
////////////////////////////////////////////////////////////////////////////////
varying vec3 cameraPixelPos, normal;
varying vec4 worldPixelPos;

////////////////////////////////////////////////////////////////////////////////
// UNIFORM
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// OUTPUT
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// PROGRAM
////////////////////////////////////////////////////////////////////////////////
void main()
{
	gl_Position = gl_ModelViewProjectionMatrix*gl_Vertex;
	worldPixelPos = objectModelMatrix*gl_Vertex;
	cameraPixelPos = vec3(gl_ModelViewMatrix*gl_Vertex);
	normal = gl_NormalMatrix*gl_Normal;
}
