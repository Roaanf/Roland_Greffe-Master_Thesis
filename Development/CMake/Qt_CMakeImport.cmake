#----------------------------------------------------------------
# Import library
#----------------------------------------------------------------
	
MESSAGE (STATUS "IMPORT : Qt library")

#----------------------------------------------------------------
# SET library PATH
#----------------------------------------------------------------

INCLUDE (GvSettings_CMakeImport)
	
#----------------------------------------------------------------
# Add INCLUDE library directories
#----------------------------------------------------------------

INCLUDE_DIRECTORIES (${GV_QT_INC})
INCLUDE_DIRECTORIES (${GV_QT_INC}/QtCore)
#INCLUDE_DIRECTORIES (${GV_QT_INC}/QtWidgets) for Qt5
INCLUDE_DIRECTORIES (${GV_QT_INC}/QtGui)
INCLUDE_DIRECTORIES (${GV_QT_INC}/QtOpenGL)
INCLUDE_DIRECTORIES (${GV_QT_INC}/QtXml)

#----------------------------------------------------------------
# Add LINK library directories
#----------------------------------------------------------------

LINK_DIRECTORIES (${GV_QT_LIB})
	
#----------------------------------------------------------------
# Set LINK libraries if not defined by user
#----------------------------------------------------------------
		
IF ( "${qtLibList}" STREQUAL "" )
	IF (WIN32)
		IF ( ${GV_DESTINATION_ARCH} STREQUAL "x86" )
			SET (qtLibList "QtCore" "QtGui" "QtOpenGL" "QtXml")
			#SET (qtLibList "Qt5Core" "Qt5Widgets" "Qt5Gui" "Qt5OpenGL" "Qt5Xml")
		ELSE ()
			SET (qtLibList "QtCore" "QtGui" "QtOpenGL" "QtXml")
			#SET (qtLibList "Qt5Core" "Qt5Widgets" "Qt5Gui" "Qt5OpenGL" "Qt5Xml")
		ENDIF ()
	ELSE ()
		IF ( ${GV_DESTINATION_ARCH} STREQUAL "x86" )
			SET (qtLibList "QtCore" "QtGui" "QtOpenGL" "QtXml")
			#SET (qtLibList "Qt5Core" "Qt5Widgets" "Qt5Gui" "Qt5OpenGL" "Qt5Xml")
		ELSE ()
			SET (qtLibList "QtCore" "QtGui" "QtOpenGL" "QtXml")
			#SET (qtLibList "Qt5Core" "Qt5Widgets" "Qt5Gui" "Qt5OpenGL" "Qt5Xml")
		ENDIF ()
	ENDIF ()
ENDIF ()
		
#----------------------------------------------------------------
# Add LINK libraries
#----------------------------------------------------------------
		
FOREACH (it ${qtLibList})
	IF (WIN32)
		LINK_LIBRARIES (optimized ${it}4 debug ${it}d4)
		#LINK_LIBRARIES (optimized ${it} debug ${it}d)
	ELSE ()
		LINK_LIBRARIES (optimized ${it} debug ${it}d)
	ENDIF ()
ENDFOREACH (it)

#----------------------------------------------------------------
# Define MACRO to wrap Qt files (uic, moc, rcc...)
#----------------------------------------------------------------
	
	# If Qt has not been found by CMake,
	# this macro replaces the CMake macro generated by the standard CMake Modules "FindQt4".
	# The original CMake signature is QT4_WRAP_UI(outfiles inputfile ... OPTIONS ...)
	MACRO (GV_QT4_WRAP_UI outfiles)
		
		FOREACH (it ${ARGN})
		
			GET_FILENAME_COMPONENT(outfile ${it} NAME_WE)
			GET_FILENAME_COMPONENT(infile  ${it} ABSOLUTE)
					
			FILE( MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/Inc)
			FILE( MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/Src)
			
			SET(outfile ${CMAKE_CURRENT_BINARY_DIR}/Inc/UI_${outfile}.h)
			GET_FILENAME_COMPONENT(outfile ${outfile} ABSOLUTE)
			
			ADD_CUSTOM_COMMAND(OUTPUT ${outfile}
				COMMAND ${GV_QT_UIC_EXECUTABLE}
				ARGS -o ${outfile} ${infile}
				MAIN_DEPENDENCY ${infile})
			
			SET(${outfiles} ${${outfiles}} ${outfile})
			
		ENDFOREACH (it)
		
	ENDMACRO (GV_QT4_WRAP_UI)
	
	
	# If Qt has not been found by CMake,
	# this macro replaces the CMake macro generated by the standard CMake Modules "FindQt4".
	# The original CMake signature is QT4_ADD_RESOURCES(outfiles inputfile ... OPTIONS ...)
	MACRO (GV_QT4_ADD_RESOURCES outfiles )
	
		FOREACH (it ${ARGN})
		
			GET_FILENAME_COMPONENT(outfilename ${it} NAME_WE)
			GET_FILENAME_COMPONENT(infile  ${it} ABSOLUTE)

			FILE( MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/Inc)
			FILE( MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/Src)
			
			SET(outfile ${CMAKE_CURRENT_BINARY_DIR}/Src/${outfilename}.qrc.cpp)
			GET_FILENAME_COMPONENT(outfile ${outfile} ABSOLUTE)
		
			ADD_CUSTOM_COMMAND(OUTPUT ${outfile}
				COMMAND ${GV_QT_RCC_EXECUTABLE}
				ARGS -name ${outfilename} -o ${outfile} ${infile}
				MAIN_DEPENDENCY ${infile} )
				
			SET(${outfiles} ${${outfiles}} ${outfile})
			
		ENDFOREACH (it)
			
	ENDMACRO (GV_QT4_ADD_RESOURCES)
	
	
	# If Qt has not been found by CMake,
	# this macro replaces the CMake macro generated by the standard CMake Modules "FindQt4".
	# The original CMake signature is QT4_AUTOMOC(sourcefile1 sourcefile2 ... )
	MACRO (GV_QT4_AUTOMOC outfiles)
	
		FOREACH (it ${ARGN})
		
			GET_FILENAME_COMPONENT(outfile ${it} NAME_WE)
			GET_FILENAME_COMPONENT(infile ${it} ABSOLUTE)
			
			FILE(READ ${infile} _contents)
			STRING(REGEX MATCH "Q_OBJECT" _match "${_contents}")			 

			IF(_match)
			
				FILE( MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/Inc)
				FILE( MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/Src)

				SET(outfile ${CMAKE_CURRENT_BINARY_DIR}/Src/${outfile}.moc.cpp)
   				GET_FILENAME_COMPONENT(outfile ${outfile} ABSOLUTE)

				ADD_CUSTOM_COMMAND(OUTPUT ${outfile}
					COMMAND ${GV_QT_MOC_EXECUTABLE}
					ARGS -o ${outfile} ${infile}
					MAIN_DEPENDENCY ${infile})
				
				SET(${outfiles} ${${outfiles}} ${outfile})
				
			ENDIF (_match)
			
		ENDFOREACH (it)
		
	ENDMACRO (GV_QT4_AUTOMOC)
