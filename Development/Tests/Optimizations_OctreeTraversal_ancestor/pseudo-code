Utilisation of the shared memory to speed up rendering

Basic algo:

sample_value = initial_Sample_value;
color = background_color;

// Iterate until the ray is opaque.
while ( color.opacity < 1 ) {
	current_node = tree_root;
	init( info_node );
	init( info_mipmap );
	// Iterate through the tree
	do {
		info_node = update_info();
		address_node = select_son( current_node, sample_value, info_node );
		current_node = load_node( address_node );
		info_mipmap = update_info_mipmap( current_node, info_node );
		mark_as_used( current_node, info_node );
	} while( info_node.depth < max_depth
		  && info_node.voxels_size > cone_aperture
		  && current_node.has_son() );

	color += brick_sampler.sample( current_node, info_mipmap, info_node );

	update_sample_value( sample_value );
	update( cone_aperture );
}


1st version:
Cache to store information about the node, thus we don't need to load it from global memory
at each step.

new type cache_cell = {
	node;
	address;
};


sample_value = initial_Sample_value;
color = background_color;

// Alloc a cache as big as possible
cache = new_shared_memory_array( SHARED_MEM_SIZE / sizeof( cache_cell ));
cache.initialise( 0 ); // fill the cache with 0

// Iterate until the ray is opaque.
while ( color.opacity < 1 ) {
	current_node = tree_root;
	init( info_node );
	init( info_mipmap );

	// Iterate through the tree
	do {
		info_node = update_info();
		// Try to load the node from the cache
		address_node = select_son( root, sample_value, info_node );
		hash = compute_hash( address_node );
		if( cache[hash].address == address_node ) {
			// Load the node from the cache.
			// We don't need to remark it as used (already done when we put it in the cache)
			current_node = cache[hash].node;
		} else {
			// The node is not in the cache, load it normally
			current_node = load_node( address_node );
			mark_as_used( current_node, info_node );

			// Try to store the node in the cache.
			// We never evict a line from the cache.
			atomic{
				if( cache[hash].address == 0 ) {
					cache[hash].node = current_node;
					cache[hash].address = address_node;
				}
			}
		}
		info_mipmap = info_mipmap( current_node, info_node );

	} while( info_node.depth < max_depth
		  && info_node.voxels_size > cone_aperture
		  && current_node.has_son() );

	color += brick_sampler.sample( current_node, info_mipmap, info_node );

	update_sample_value( sample_value );
	update( cone_aperture );
}

=> Little to no gain (depending of the wanted depth)
On a 52ms kernel, bigger gain was ~1ms.
The cache is mostly empty (33% full at most)
We tried to allow 2 nodes by hash => the cache is fuller, but the logic involved
slow everything down by at least a factor 1.5.


2nd version:
Grand father: we store the grand father of the nodes during the descent of the tree
and start the loop from this node if possible. If not, we start from the root.

new type grand_father_info = {
	grandFather;
	node[2];
	info_node[2];
	info_mimap[2];
};

sample_value = initial_Sample_value;
color = background_color;

// Alloc enough memory to have one array cell per threads
cache = new_shared_memory_array( N_THREADS );
cache.initialise( 0 ); // fill the cache with 0

// Iterate until the ray is opaque.
while ( color.opacity < 1 ) {

	// Get the grand father from the cache
	grand_father = cache[thread_id].grand_father;
	father = !grand_father;
	current_node = cache[thread_id].node[grand_father];
	info_node = cache[thread_id].info_node[grand_father];

	// Check if we can reuse it
	if( !sample_value_is_in( sample_value, current_node, info_node ) ) {
		// Restart from root
		current_node = tree_root;
		init( info_mipmap );
		init( info_node );
	} else {
		// Load the rest of the informations
		info_mimap = cache[thread_id].info_mimap[grand_father];
	}

	// Iterate through the tree
	do {
		// Save father
		cache[thread_id].info_mimap[father] = info_mimap;
		cache[thread_id].node[father] = current_node;
		cache[thread_id].info_node[father] = info_node;

		// Get the son
		info_node = update_info();
		address_node = select_son( root, sample_value );
		current_node = load_node( address_node );
		info_mipmap = info_mipmap( current_node, info_node );
		mark_as_used( current_node, info_node );

		// Change the grand father
		father = !father;
	} while( info_node.depth < max_depth
		  && info_node.voxels_size > cone_aperture
		  && current_node.has_son() );
	cache[thread_id].grand_father = !father;

	color += brick_sampler.sample( current_node, info_mipmap, info_node );

	update_sample_value( sample_value );
	update( cone_aperture );
}

=> little gain (2 to 3ms on a 52ms kernel)
We need too much write in the shared (once per iteration of the loop).
Moreover, the shared memory is full (we can not even store all the variable we'd want
and need to recompute some of them).


3rd version:
Improved cache, we now store enough information to be able to restart from there.

new type cache_cell = {
	node;
	info_node;
	info_mimap;
};

sample_value = initial_Sample_value;
color = background_color;

// Alloc a cache as big as possible
cache = new_shared_memory_array( SHARED_MEM_SIZE / sizeof( cache_cell ));
cache.initialise( 0 ); // fill the cache with 0

// Iterate until the ray is opaque.
while ( color.opacity < 1 ) {

	depth = CONSTANT_DEPTH;

	// Compute a hash which only depends of the node where sample_value is.
	hash = compute_hash( sample_value, depth );

	// Get the corresponding node from the cache
	current_node = cache[hash];
	info_node = cache[hash];

	// Check if we can reuse it
	if( !sample_value_is_in( sample_value, current_node, info_node ) ) {
		// Restart from root
		current_node = tree_root;
		init( info_mipmap );
		init( info_node );
	} else {
		// Load the rest of the informations
		info_mimap = cache[thread_id].info_mimap;
	}

	// Iterate through the tree
	do {
		info_node = update_info();
		address_node = select_son( current_node, sample_value, info_node );
		current_node = load_node( address_node );
		info_mipmap = update_info_mipmap( current_node, info_node );
		mark_as_used( current_node, info_node );

		// Try to store the node in the cache.
		// We never evict a line from the cache.
		atomic{
			if( info_node.depth == CONSTANT_DEPTH
				&& cache[hash].node == 0 ) {
				cache[hash].node = current_node;
				cache[hash].info_node = info_node;
				cache[hash].info_mipmap = info_mipmap;
			}
		}
	} while( info_node.depth < max_depth
		  && info_node.voxels_size > cone_aperture
		  && current_node.has_son() );

	color += brick_sampler.sample( current_node, info_mipmap );

	update_sample_value( sample_value );
	update( cone_aperture );
}

This version offer a little gain ( up to 10% ) on several kernels, but the results depends of the
chosen constant. With the same constant, a scene may be slower while an other is faster.
The atomic store hurt the performance a bit but it's not what cause the kernel to be slow
(without the synchro, the kernel is only ~2% quicker)


4st version: Improved grand father.
Instead of always saving the grand father, we choose a depth that correspond to the nth ancestor
of the node and we only store this particular ancestor.

new type ancestor_info = {
	node;
	info_node;
	info_mimap;
};

sample_value = initial_Sample_value;
color = background_color;

// Alloc enough memory to have one array cell per threads
cache = new_shared_memory_array( N_THREADS );
cache.initialise( 0 ); // fill the cache with 0

// Iterate until the ray is opaque.
while ( color.opacity < 1 ) {

	// Get the stored ancestor
	current_node = cache[thread_id];
	info_node = cache[thread_id];

	// Check if we can reuse it
	if( !sample_value_is_in( sample_value, current_node, info_node ) ) {
		// Restart from root
		current_node = tree_root;
		init( info_mipmap );
		init( info_node );
	} else {
		// Load the rest of the informations
		info_mimap = cache[thread_id].info_mimap;
	}

	// We compute the depth of the voxel we want to use and remove a constant number,
	// we thus get a depth corresponding to one ancestor of the voxel (for instance, with
	// NUMBER_OF_ANCESTOR = 2, we get the depth of the grand father.
	optimal_depth = compute_optimal_depth( cone_aperture ) - NUMBER_OF_ANCESTOR;

	// Iterate through the tree
	do {
		info_node = update_info();
		address_node = select_son( current_node, sample_value, info_node );
		current_node = load_node( address_node );
		info_mipmap = update_info_mipmap( current_node, info_node );
		mark_as_used( current_node, info_node );

		// If we reach the ancestor we want to store, store it
		if( info_node.depth == optimal_depth ) {
				cache[thread_id].node = current_node;
				cache[thread_id].info_node = info_node;
				cache[thread_id].info_mipmap = info_mipmap;
		}
	} while( info_node.depth < max_depth
		  && info_node.voxels_size > cone_aperture
		  && current_node.has_son() );

	color += brick_sampler.sample( current_node, info_mipmap );

	update_sample_value( sample_value );
	update( cone_aperture );
}

Almost no impact at long distance 689µs -> 705µs (camera is far enough of the object to be blocked at depth 3)

With a camera close to the object, by limiting the depth :
depth 1: 5.3ms -> 5.4ms
depth 2: 10.4ms -> 10.6ms
depth 3: 16.9ms -> 15.9ms
depth 4: 25.5ms -> 22.5ms
depth 5: 37ms -> 31.9ms
depth 6: 51.5ms -> 44.3ms
depth 7: 68.1ms -> 59.25ms (can't fit in the cache, so some production happens between each frame)
2 other camera, much closer
at depth 10: 105ms -> 83.5ms
depth 8 without silhouette: 61.6ms -> 51.9ms
With transparency (depth 7 on the AmplifiedVolume demo): 301ms -> 270.3ms

The NUMBER_OF_ANCESTOR constant has been find empirically. The optimal value (4) remain the same at
least until depth 10 for all the tested scenes.
