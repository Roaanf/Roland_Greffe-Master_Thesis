/*
 * GigaVoxels - GigaSpace
 *
 * Website: http://gigavoxels.inrialpes.fr/
 *
 * Contributors: GigaVoxels Team
 *
 * BSD 3-Clause License:
 *
 * Copyright (C) 2007-2015 INRIA - LJK (CNRS - Grenoble University), All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the organization nor the names  of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDER BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
//VolumeTreeRendererCUDA_instancing.hcu
#ifndef _VOLUMETREERENDERERCUDA_INSTANCING_HCU_
#define _VOLUMETREERENDERERCUDA_INSTANCING_HCU_

/******************************************************************************
 ******************************* INCLUDE SECTION ******************************
 ******************************************************************************/

#include <cfloat>

// Cuda
#include <cutil_math.h>

// Gigavoxels
#include "GvCore/GPUPool.h"
#include "GvCore/RendererHelpers.hcu"
#include "GvCore/RendererTypes.h"

#include "GvRenderer/VolumeTreeSampler.hcu"
#include "GvRenderer/VolumeTreeTraversal.hcu"
#include "GvRenderer/RendererParameters.hcu"

#include "GvPerfMon/CUDAPerfMon.h"
#include "GvPerfMon/CUDAPerfMon.hcu"

/******************************************************************************
 ************************* DEFINE AND CONSTANT SECTION ************************
 ******************************************************************************/

/******************************************************************************
 ****************************** INLINE DEFINITION *****************************
 ******************************************************************************/

namespace GvRenderer
{

/******************************************************************************
 * ...
 *
 * @param Pid ...
 * @param blockPos ...
 * @param pixelCoords ...
 ******************************************************************************/
template<class BlockResolution>
__device__
inline void initPixelCoords(uint Pid, uint2 &blockPos, uint2 &pixelCoords)
{
#if RENDER_USE_SWIZZLED_THREADS==0
	pixelCoords.x = threadIdx.x + __uimul(blockIdx.x, BlockResolution::x);
	pixelCoords.y = threadIdx.y + __uimul(blockIdx.y, BlockResolution::y);
#else //Z-curve scheduling

	GvCore::deinterleaveBits32(Pid, pixelCoords);

#if 1
	blockPos = make_uint2(blockIdx.x, blockIdx.y);
#else
	uint Bid=blockIdx.x+blockIdx.y*gridDim.x;
	deinterleaveBits32(Bid, blockPos);
#endif

	pixelCoords.x += blockPos.x * BlockResolution::x;
	pixelCoords.y += blockPos.y * BlockResolution::y;
#endif
}

/******************************************************************************
 * ...
 *
 * @param volumeTree ...
 * @param sampleShader ...
 * @param gpuCache ...
 * @param pixelCoords ...
 * @param rayStartTree ...
 * @param rayDirTree ...
 * @param tMaxTree ...
 * @param tTree ...
 ******************************************************************************/
template< bool fastUpdateMode, bool priorityOnBrick, class VolTreeKernelType, class SampleShaderType, class GPUCacheType >
__device__
void renderVolTree_Std( VolTreeKernelType& volumeTree, SampleShaderType& sampleShader, GPUCacheType& gpuCache,
					   uint2 pixelCoords, const float3 rayStartTree, const float3 rayDirTree, const float tMaxTree, float& tTree )
{
	CUDAPM_KERNEL_DEFINE_EVENT(2);
	CUDAPM_KERNEL_DEFINE_EVENT(3);
	CUDAPM_KERNEL_DEFINE_EVENT(4);
	CUDAPM_KERNEL_DEFINE_EVENT(5);

	CUDAPM_KERNEL_START_EVENT(pixelCoords, 5);

	//Keep root node in cache
	gpuCache._nodeCacheManager.setElementUsage( 0 );
	//////

	// Sampler declaration
	GvRenderer::VolumeTreeSampler< VolTreeKernelType > brickSampler;
	brickSampler.volumeTree = &volumeTree;

	float3 samplePosTree = rayStartTree + tTree * rayDirTree;

	sampleShader.preShade( rayStartTree, rayDirTree, tTree );

	// Ray marching
	int numLoop = 0;
	while
		( tTree < tMaxTree
		&& numLoop < 5000
		&& !sampleShader.stopCriterion( samplePosTree ) )
	{
		CUDAPM_KERNEL_START_EVENT(pixelCoords, 4);

		//float3 samplePosTree = rayStartTree + tTree * rayDirTree;
		const float coneAperture = sampleShader.getConeAperture( tTree );

		GvStructure::OctreeNode node;

		CUDAPM_KERNEL_START_EVENT(pixelCoords, 2);

		float nodeSizeTree;
		float3 sampleOffsetInNodeTree;

		// Descent octree
		bool modifInfoWriten = false;

		GvRenderer::rendererDescentOctree< priorityOnBrick >
							( volumeTree, gpuCache, node, samplePosTree, coneAperture,
							nodeSizeTree, sampleOffsetInNodeTree, brickSampler, modifInfoWriten );

		float rayLengthInNodeTree = GvCore::getRayLengthInNode( sampleOffsetInNodeTree, nodeSizeTree, rayDirTree );

		CUDAPM_KERNEL_STOP_EVENT(pixelCoords, 2);

		if ( fastUpdateMode && modifInfoWriten )
		{
			break;
		}

		// If node is a brick, renderer it.
		if ( node.isBrick() )
		{
			CUDAPM_KERNEL_START_EVENT( pixelCoords, 3 );

			// don't go past the brick size, nor the depth limit
			const float limit = fminf( rayLengthInNodeTree, tMaxTree - tTree );

			float dt = GvRenderer::rendererBrickSampling< fastUpdateMode, priorityOnBrick >
				( volumeTree, sampleShader, gpuCache, rayStartTree, rayDirTree,
				tTree, limit, brickSampler, modifInfoWriten );

			CUDAPM_KERNEL_STOP_EVENT( pixelCoords, 3 );

			tTree += dt;
		}
		else
		{
			tTree += rayLengthInNodeTree;// + coneAperture;
			tTree += sampleShader.getConeAperture(tTree);
		}

		samplePosTree = rayStartTree + tTree * rayDirTree;
		numLoop++;

		CUDAPM_KERNEL_STOP_EVENT(pixelCoords, 4);

	} // while

	CUDAPM_KERNEL_STOP_EVENT(pixelCoords, 5);

	sampleShader.postShade();
}

/******************************************************************************
 * CUDA kernel ...
 *
 * @param volumeTree ...
 * @param gpuCache ...
 ******************************************************************************/
template<	class BlockResolution, bool fastUpdateMode, bool priorityOnBrick, 
			class SampleShaderType, class VolTreeKernelType, class GPUCacheType>
__global__
void RenderKernelInstancing( VolTreeKernelType volumeTree, GPUCacheType gpuCache,
						 const float4x4 *invModelMatrix, int nModel )
{
	// per-pixel shader instance
	typename SampleShaderType::KernelType sampleShader;

	__shared__ float3 rayStartInTree;

	float3 rayDirInTree;

	CUDAPM_KERNEL_DEFINE_EVENT(0);
	CUDAPM_KERNEL_DEFINE_EVENT(1);

	// Compute thread ID
	uint Pid = threadIdx.x + threadIdx.y * BlockResolution::x;

	// Pixel position
	uint2 pixelCoords;
	uint2 blockPos;
	initPixelCoords< BlockResolution >( Pid, blockPos, pixelCoords );

	CUDAPM_KERNEL_START_EVENT(pixelCoords, 0);

	bool outOfFrame = ( pixelCoords.x >= k_renderViewContext.frameSize.x ) || ( pixelCoords.y >= k_renderViewContext.frameSize.y );

	if ( ! outOfFrame )
	{


#if 1
		/// Read color and depth from the input buffers

		uchar4 frameColor = k_renderViewContext.inFrameColor.get( pixelCoords );
		float frameDepth = GvCore::getFrameDepthIn( pixelCoords );

		/// compute the eye ray vector

		// Calculate eye ray in world space
		const float3 pixelVecWP = k_renderViewContext.viewPlaneDirWP
							+ k_renderViewContext.viewPlaneXAxisWP * (float)pixelCoords.x
							+ k_renderViewContext.viewPlaneYAxisWP * (float)pixelCoords.y;
//		const float rangularScale = rsqrtf( pixelVecWP.x * pixelVecWP.x  +  pixelVecWP.y * pixelVecWP.y  +  pixelVecWP.z * pixelVecWP.z );
//		const float angularScale = sqrtf( pixelVecWP.x * pixelVecWP.x  +  pixelVecWP.y * pixelVecWP.y  +  pixelVecWP.z * pixelVecWP.z );

		/// Init variables storing computation during the loop

		// Retrieve the view-space depth from the depth buffer. Only works if w was 1.0f.
		// See: http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=304624&page=2
		float clipZ = 2.0f * frameDepth - 1.0f;
		float frameEyeDepth = -k_renderViewContext.frustumD / ( -clipZ - k_renderViewContext.frustumC );
		frameEyeDepth = fminf( frameEyeDepth, k_renderViewContext.frustumFar );

		float4 pixelColorF = make_float4( 0.f ); // to accumulate the color of instanciations
		float minEyeDepth = k_renderViewContext.frustumFar; // to handle accumulation of transparent objects

		/// Loop over each instanciation

		for( int n = 0 ; n < nModel ; n++ )
		{
			// Calculate eye ray in tree space
			float3 rayEndtInWorld = pixelVecWP + k_renderViewContext.viewCenterWP;
			float3 rayEndtInTree = mul( invModelMatrix[n], rayEndtInWorld );
			rayStartInTree = mul( invModelMatrix[n], k_renderViewContext.viewCenterWP );
			rayDirInTree = rayEndtInTree - rayStartInTree;

			float boxInterMin = 0.0f;		// boxInterMin - v_sqrtf*rawboxInterMin,
			float boxInterMax = FLT_MAX;	// boxInterMax - v_sqrtf*rawboxInterMax
			// compute the intersection with the octree
			const int hit = GvCore::intersectBox( rayStartInTree, rayDirInTree,
												  make_float3(0.001f), make_float3(0.999f),
//												  make_float3( FLT_EPSILON ), make_float3( 1.0f - FLT_EPSILON ),
//												  make_float3(0.f), make_float3(1.f),
												  boxInterMin, boxInterMax );

			// the ray intersect the octree
			if ( hit )
			{
				const float3 &v = rayDirInTree;
				const float v_sqrtf = sqrtf( v.x * v.x  +  v.y * v.y  +  v.z * v.z );
				const float eyeD_To_T = v_sqrtf / k_renderViewContext.frustumNear;
				// normalize direction vector
				boxInterMin = fmaxf( v_sqrtf * boxInterMin, eyeD_To_T * k_renderViewContext.frustumNear );
				boxInterMax = fminf( v_sqrtf * boxInterMax, eyeD_To_T * frameEyeDepth );

				// the octree isn't after nor before the frustum
				if ( boxInterMin < boxInterMax )
				{
					const float v_rsqrtf = rsqrtf( v.x * v.x  +  v.y * v.y  +  v.z * v.z );
					const float T_To_eyeD = v_rsqrtf * k_renderViewContext.frustumNear;
					// normalize direction vector
					rayDirInTree = v_rsqrtf * rayDirInTree;

					/// Rendering

					// final interval
					const float tMin = boxInterMin + sampleShader.getConeAperture( boxInterMin );
					const float tMax = boxInterMax;
					float t = tMin;

					// Do the rendering itself
					CUDAPM_KERNEL_START_EVENT( pixelCoords, 1 );
					renderVolTree_Std< fastUpdateMode, priorityOnBrick >( volumeTree, sampleShader, gpuCache, pixelCoords, rayStartInTree, rayDirInTree, tMax, t );
					CUDAPM_KERNEL_STOP_EVENT( pixelCoords, 1 );

					// Get the accumulated color
					float4 accCol = sampleShader.getColor();

					// Choose which color is accumulated over the other
					const float eyeDepth = t * T_To_eyeD;
					const bool accIsFront = eyeDepth < minEyeDepth;
					// eyeDepth < minEyeDepth || (pixelColorF.w > opacityStep && frameEyeDepth < 0.999f * k_renderViewContext.frustumFar ) ;
					//accCol.w > opacityStep || pixelColorF.w > opacityStep || eyeDepth < minEyeDepth;
					float oldw = pixelColorF.w;
					// Accumulate with the existing color
					float4 &front = accIsFront ? accCol : pixelColorF;
					float4 &back = accIsFront ? pixelColorF : accCol;
					pixelColorF = front + back * (1.f - front.w);
					// update the current depth if necessary
					if ( accCol.w > opacityStep )
						frameEyeDepth = eyeDepth;
//					else if ( accCol.w > opacityStep && oldw < opacityStep )
//						frameEyeDepth = T_To_eyeD * tMax;

					// update minEyeDepth used to porperly accumulated instanciations over each other
//					if ( accCol.w > 0.f )
//						minEyeDepth = fminf( minEyeDepth, tMin * T_To_eyeD );
				} // in frustum and not hidden framedepth
			} // hit octree
		} // for

		/// write output

		// Get the background color in float
		float4 frameColorF;
		frameColorF.x = frameColor.x / 255.0f;
		frameColorF.y = frameColor.y / 255.0f;
		frameColorF.z = frameColor.z / 255.0f;
		frameColorF.w = frameColor.w / 255.0f;
		// Accumulate the background color over the computed color
		pixelColorF = pixelColorF + frameColorF * ( 1.0f - pixelColorF.w );
		// saturate to ensure correct values
		pixelColorF.x = __saturatef( pixelColorF.x );
		pixelColorF.y = __saturatef( pixelColorF.y );
		pixelColorF.z = __saturatef( pixelColorF.z );
		pixelColorF.w = __saturatef( pixelColorF.w );
		// translate back to unsigned char
		frameColor = make_uchar4( (uchar)(pixelColorF.x*255.0f), (uchar)(pixelColorF.y*255.0f), (uchar)(pixelColorF.z*255.0f), (uchar)(pixelColorF.w*255.0f) );

		// translate eye-depth back to Z-depth
		clipZ = -k_renderViewContext.frustumC + k_renderViewContext.frustumD / frameEyeDepth;
		frameDepth = __saturatef( ( clipZ + 1.0f ) * 0.5f );

		// write to output buffers
		k_renderViewContext.outFrameColor.set( pixelCoords, frameColor );
		GvCore::setFrameDepthOut( pixelCoords, frameDepth );



#else


		// Read color and depth from the input buffers
		uchar4 frameColor = k_renderViewContext.inFrameColor.get( pixelCoords );
		float frameDepth = GvCore::getFrameDepthIn( pixelCoords );

		/// compute the eye ray vector

		// Calculate eye ray in world space
		const float3 pixelVecWP = k_renderViewContext.viewPlaneDirWP
							+ k_renderViewContext.viewPlaneXAxisWP * (float)pixelCoords.x
							+ k_renderViewContext.viewPlaneYAxisWP * (float)pixelCoords.y;

		float4 pixelColorF = make_float4( 0.f ); // to accumulate the color from GigaVoxels
		float minEyeDepth = k_renderViewContext.frustumFar; // to handle accumulation of transparent objects
		for( int n = 0 ; n < nModel ; n++ )
		{
			// Calculate eye ray in tree space
//*/
			const float3 pixelVecInTree = mulRot( invModelMatrix[n], pixelVecWP );
			rayStartInTree = mul(invModelMatrix[n], k_renderViewContext.viewCenterWP);
			rayDirInTree = normalize( pixelVecInTree );
/*/
			const float3 pixelVecInTree = mulRot( k_renderViewContext.invModelMatrix, pixelVecWP );
			rayStartInTree = mul(k_renderViewContext.invModelMatrix, k_renderViewContext.viewCenterWP);
			rayDirInTree = normalize( pixelVecInTree );
//*/

			/// Compute the casting interval

			float boxInterMin = 0.0f;
			float boxInterMax = 10000.0f;
			// compute the intersection with the octree
			const int hit = GvCore::intersectBox( rayStartInTree, rayDirInTree, make_float3(0.001f), make_float3(0.999f), boxInterMin, boxInterMax );

			// the ray intersect the octree
			if ( hit )
			{
				// compute scaling factors to translate "eyeDepth" to "distance in tree space"
				const float pixelVecInTree_Length = length( pixelVecInTree );
				const float eyeD_To_T = pixelVecInTree_Length / k_renderViewContext.frustumNear;
				const float T_To_eyeD = k_renderViewContext.frustumNear / pixelVecInTree_Length;

				boxInterMin = fmaxf( boxInterMin, eyeD_To_T * k_renderViewContext.frustumNear );
				boxInterMax = fminf( boxInterMax, eyeD_To_T * k_renderViewContext.frustumFar );

				// the octree isn't after nor before the frustum
				if ( boxInterMin < boxInterMax )
				{
					// take into account the current depth as a maximum
					if ( frameDepth < 1.0f )
					{
						// Retrieve the view-space depth from the depth buffer. Only works if w was 1.0f.
						// See: http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=304624&page=2
						const float clipZ = 2.0f * frameDepth - 1.0f;
						const float eyeDepth = -k_renderViewContext.frustumD / ( -clipZ - k_renderViewContext.frustumC );
						// Then we scale it to get the distance from the camera in tree space
						const float frameT = eyeD_To_T * eyeDepth;
						// the max boundary is the min of the two possible
						boxInterMax = mincc( frameT, boxInterMax );
					}

					/// Rendering

					// instanciation isn't hidden
					if ( boxInterMin < boxInterMax )
					{
						// final interval
						const float tMin = boxInterMin + sampleShader.getConeAperture( boxInterMin );
						const float tMax = boxInterMax;
						float t = tMin;

						// Do the rendering itself
						CUDAPM_KERNEL_START_EVENT(pixelCoords, 1);
						renderVolTree_Std< fastUpdateMode, priorityOnBrick >( volumeTree, sampleShader, gpuCache, pixelCoords, rayStartInTree, rayDirInTree, tMax, t );
						CUDAPM_KERNEL_STOP_EVENT(pixelCoords, 1);

						// Get the accumulated color
						float4 accCol = sampleShader.getColor();

						// Choose which color is accumulated over the other
						const float eyeDepth = t * T_To_eyeD;
						const bool accIsFront = accCol.w > opacityStep || pixelColorF.w > opacityStep || eyeDepth < minEyeDepth;
						// Accumulate with the existing color
						float4 &front = accIsFront ? accCol : pixelColorF;
						float4 &back = accIsFront ? pixelColorF : accCol;
						pixelColorF = front + back * (1.f - front.w );

						if ( accCol.w > opacityStep )
						{
							// scale to get the eye depth
							const float eyeDepth = t * T_To_eyeD;
							//http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=234519&page=2
							const float clipZ = -k_renderViewContext.frustumC + k_renderViewContext.frustumD / eyeDepth;
							frameDepth = __saturatef( ( clipZ + 1.0f ) * 0.5f );
						}

						// update minEyeDepth used to porperly accumulated instanciations over each other
						minEyeDepth = fminf( minEyeDepth, tMin * T_To_eyeD );
					} // frameDepth
				} // frustum
			} // hit octree
		} // for

		/// write output

		// Get the background color in float
		float4 frameColorF;
		frameColorF.x = frameColor.x / 255.0f;
		frameColorF.y = frameColor.y / 255.0f;
		frameColorF.z = frameColor.z / 255.0f;
		frameColorF.w = frameColor.w / 255.0f;
		// Accumulate the background color over the computed color
		pixelColorF = pixelColorF + frameColorF * ( 1.0f - pixelColorF.w );
		// saturate to ensure correct values
		pixelColorF.x = __saturatef( pixelColorF.x );
		pixelColorF.y = __saturatef( pixelColorF.y );
		pixelColorF.z = __saturatef( pixelColorF.z );
		pixelColorF.w = __saturatef( pixelColorF.w );
		// translate back to unsigned char
		frameColor = make_uchar4( (uchar)(pixelColorF.x*255.0f), (uchar)(pixelColorF.y*255.0f), (uchar)(pixelColorF.z*255.0f), (uchar)(pixelColorF.w*255.0f) );

		// write to output buffers
		k_renderViewContext.outFrameColor.set( pixelCoords, frameColor );
		GvCore::setFrameDepthOut( pixelCoords, frameDepth );
#endif



	} //!outOfFrame

	CUDAPM_KERNEL_STOP_EVENT(pixelCoords, 0);
}




// FIXME: Move this to another place
/******************************************************************************
 * CUDA kernel ...
 *
 * @param syntheticBuffer ...
 * @param totalNumElems ...
 ******************************************************************************/
__global__
void SyntheticInfo_Render(uchar4 *syntheticBuffer, uint totalNumElems){

	uint2 pixelCoords;
	pixelCoords.x = threadIdx.x + __uimul(blockIdx.x, blockDim.x) ;
	pixelCoords.y = threadIdx.y + __uimul(blockIdx.y, blockDim.y);

	uint elemIdx= pixelCoords.x+pixelCoords.y* (blockDim.x*gridDim.x);

	//uint totalNumElems=syntheticBuffer.getResolution().x;

	uchar4 pixelColor;

	if(elemIdx<totalNumElems){
		uchar4 sval=syntheticBuffer[elemIdx];

		if(sval.w){
			pixelColor=	make_uchar4( 255, 0, 0, 255 );
		}else if(sval.x){
			pixelColor=	make_uchar4( 0, 255, 0, 255 );
		} else {
			pixelColor=	make_uchar4( 0, 0, 0, 255 );
		}

		k_renderViewContext.outFrameColor.set(pixelCoords, pixelColor);
	}else{
		//pixelColor=make_uchar4( 255, 255, 255, 255 );
	}
}

} // namespace GvRenderer

#endif // !_VOLUMETREERENDERERCUDA_INSTANCING_HCU_
